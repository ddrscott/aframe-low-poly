class LowPoly{static addMappings(name,mapping){return Object.assign({},mapping,{amplitude:name+".amplitude","amplitude-variance":name+".amplitudeVariance",seed:name+".seed"})}static addSchema(schema){return Object.assign({},schema,{amplitude:{default:.05},amplitudeVariance:{default:.001},flatShading:{default:true},seed:{default:"apples"}})}static play(that,geometry){const data=that.data,el=that.el;let material=el.components.material;geometry.mergeVertices();LowPoly.randomizeVertices(data,geometry);if(!material){material={};material.material=new THREE.MeshPhongMaterial}if(data.flatShading){material.material.setValues({flatShading:true})}that.mesh=new THREE.Mesh(geometry,material.material);el.setObject3D("mesh",that.mesh)}static update(oldData,newData,geometry){if(!geometry){console.log("[ERR] Passed geometry in update is invalid.");return}LowPoly.randomizeVertices(newData,geometry)}static randomizeVertices(data,geometry){Random.seed(data.seed);for(let v,i=0,l=geometry.vertices.length;i<l;i++){v=geometry.vertices[i];LowPoly.randomizeVertexDimension(v,"x",data.amplitude,data.amplitudeVariance);LowPoly.randomizeVertexDimension(v,"y",data.amplitude,data.amplitudeVariance);LowPoly.randomizeVertexDimension(v,"z",data.amplitude,data.amplitudeVariance)}geometry.verticesNeedUpdate=true}static randomizeVertexDimension(vertex,dimension,amplitude,amplitudeVariance){let ang=Random.random()*Math.PI*2,amp=amplitude+Random.random()*amplitudeVariance;const key="original-"+dimension;if(!(key in vertex)){vertex[key]=vertex[dimension]}var value=vertex[key];vertex[dimension]=value+Math.sin(ang)*amp}}class Random{static seed(seed){var seed=Random.xfnv1a(seed.toString());this.random=Random.mulberry32(seed())}static xfnv1a(k){for(var i=0,h=2166136261>>>0;i<k.length;i++)h=Math.imul(h^k.charCodeAt(i),16777619);return function(){h+=h<<13;h^=h>>>7;h+=h<<3;h^=h>>>17;return(h+=h<<5)>>>0}}static mulberry32(a){return function(){var t=a+=1831565813;t=Math.imul(t^t>>>15,t|1);t^=t+Math.imul(t^t>>>7,t|61);return((t^t>>>14)>>>0)/4294967296}}static random(){return this.random()}}var extendDeep=AFRAME.utils.extendDeep;var meshMixin=AFRAME.primitives.getMeshMixin();AFRAME.registerPrimitive("lp-circle",extendDeep({},meshMixin,{defaultComponents:{"low-poly-circle":{}},mappings:LowPoly.addMappings("low-poly-circle",{radius:"low-poly-circle.radius",segments:"low-poly-circle.segments"})}));AFRAME.registerComponent("low-poly-circle",{schema:LowPoly.addSchema({radius:{default:1},segments:{default:10}}),play:function(){const data=this.data;const geometry=new THREE.CircleGeometry(data.radius,data.segments);LowPoly.play(this,geometry);this.geometry=geometry},update:function(oldData){LowPoly.update(oldData,this.data,this.geometry)},remove:function(){this.el.removeObject3D("mesh")}});var extendDeep=AFRAME.utils.extendDeep;var meshMixin=AFRAME.primitives.getMeshMixin();AFRAME.registerPrimitive("lp-cone",extendDeep({},meshMixin,{defaultComponents:{"low-poly-cone":{}},mappings:LowPoly.addMappings("low-poly-cone",{"radius-top":"low-poly-cone.topRadius","radius-bottom":"low-poly-cone.bottomRadius",height:"low-poly-cone.height","segments-radial":"low-poly-cone.radialSegments","segments-height":"low-poly-cone.heightSegments"})}));AFRAME.registerComponent("low-poly-cone",{schema:LowPoly.addSchema({topRadius:{default:1},bottomRadius:{default:1},height:{default:1},radialSegments:{default:10},heightSegments:{default:10}}),play:function(){const data=this.data;const geometry=new THREE.CylinderGeometry(data.topRadius,data.bottomRadius,data.height,data.radialSegments,data.heightSegments);LowPoly.play(this,geometry);this.geometry=geometry},update:function(oldData){LowPoly.update(oldData,this.data,this.geometry)},remove:function(){this.el.removeObject3D("mesh")}});var extendDeep=AFRAME.utils.extendDeep;var meshMixin=AFRAME.primitives.getMeshMixin();AFRAME.registerPrimitive("lp-plane",extendDeep({},meshMixin,{defaultComponents:{"low-poly-plane":{}},mappings:LowPoly.addMappings("low-poly-plane",{width:"low-poly-plane.width",height:"low-poly-plane.height","segments-width":"low-poly-plane.widthSegments","segments-height":"low-poly-plane.heightSegments"})}));AFRAME.registerComponent("low-poly-plane",{schema:LowPoly.addSchema({width:{default:1},height:{default:1},widthSegments:{default:10},heightSegments:{default:10}}),play:function(){const data=this.data;const geometry=new THREE.PlaneGeometry(data.width,data.height,data.widthSegments,data.heightSegments);LowPoly.play(this,geometry);this.geometry=geometry},update:function(oldData){LowPoly.update(oldData,this.data,this.geometry)},remove:function(){this.el.removeObject3D("mesh")}});var extendDeep=AFRAME.utils.extendDeep;var meshMixin=AFRAME.primitives.getMeshMixin();AFRAME.registerPrimitive("lp-sphere",extendDeep({},meshMixin,{defaultComponents:{"low-poly-sphere":{}},mappings:LowPoly.addMappings("low-poly-sphere",{radius:"low-poly-sphere.radius","segments-height":"low-poly-sphere.heightSegments","segments-width":"low-poly-sphere.widthSegments"})}));AFRAME.registerComponent("low-poly-sphere",{schema:LowPoly.addSchema({radius:{default:1},heightSegments:{default:5},widthSegments:{default:5}}),play:function(){const data=this.data;const geometry=new THREE.SphereGeometry(data.radius,data.widthSegments,data.heightSegments);LowPoly.play(this,geometry);this.geometry=geometry},update:function(oldData){LowPoly.update(oldData,this.data,this.geometry)},remove:function(){this.el.removeObject3D("mesh")}});