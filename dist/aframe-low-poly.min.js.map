{
  "version": 3,
  "sources": ["../src/main.js", "../src/primitives/box.js", "../src/primitives/circle.js", "../src/primitives/cone.js", "../src/primitives/cylinder.js", "../src/primitives/plane.js", "../src/primitives/sphere.js", "../src/index.js"],
  "sourcesContent": ["export class LowPoly {\n\n  static addMappings(name, mapping) {\n    return Object.assign({}, mapping, {\n      'max-amplitude'             : name + '.maxAmplitude',\n      'min-amplitude'             : name + '.minAmplitude',\n      'seed'                      : name + '.seed',\n    });\n  }\n\n  static addSchema(schema) {\n    return Object.assign({}, schema, {\n      // Randomness amplitude and variance.\n      maxAmplitude      : {default: {x: 0.1, y: 0.1, z: 0.1}, type: 'vec3'},\n      minAmplitude      : {default: {x: 0, y: 0, z: 0}, type: 'vec3'},\n      amplitudePDF      : {default: p => p},\n      seed              : {default: \"apples\"},\n\n      // Material.\n      flatShading       : {default: true},\n    });\n  }\n\n  static create(that, createGeometry) {\n    const data = that.data,\n          el = that.el;\n\n    let material = el.components.material;\n    let geometry = createGeometry(data);\n    geometry.mergeVertices();\n    LowPoly.randomizeVertices(data, geometry);\n\n    if (!material) {\n      material = {};\n      material.material = new THREE.MeshPhongMaterial();\n    }\n\n    if (data.flatShading) {\n      material.material.setValues({\n        flatShading: true,\n      });\n    }\n\n    that.mesh = new THREE.Mesh(geometry, material.material);\n    el.setObject3D('mesh', that.mesh);\n  }\n\n  static randomizeVertices(data, geometry) {\n      Random.seed(data.seed);\n      for (let v, i = 0, l = geometry.vertices.length; i < l; i++) {\n        v = geometry.vertices[i];\n\n        LowPoly.randomizeVertexDimension(v, 'x', data.amplitudePDF, data.maxAmplitude.x, data.minAmplitude.x);\n        LowPoly.randomizeVertexDimension(v, 'y', data.amplitudePDF, data.maxAmplitude.y, data.minAmplitude.y);\n        LowPoly.randomizeVertexDimension(v, 'z', data.amplitudePDF, data.maxAmplitude.z, data.minAmplitude.z);\n      }\n      geometry.verticesNeedUpdate = true;\n  }\n\n  static randomizeVertexDimension(vertex, dim, amplitudePDF, maxAmplitude, minAmplitude) {\n    let p = amplitudePDF(Random.random()),\n        ori = 'o' + dim,\n        amp = (maxAmplitude - minAmplitude) * p + minAmplitude;\n\n    if (!(ori in vertex)) {\n      vertex[ori] = vertex[dim];\n    }\n    vertex[dim] = vertex[ori] + amp;\n  }\n}\n\nexport class LowPolyFactory {\n\n  static simple(geometryName, createGeometry, properties) {\n    var extendDeep = AFRAME.utils.extendDeep;\n\n    // The mesh mixin provides common material properties for creating mesh-based primitives.\n    // This makes the material component a default component and maps all the base material properties.\n    var meshMixin = AFRAME.primitives.getMeshMixin();\n\n    var defaultComponents = {};\n    var componentName = 'low-poly-' + geometryName;\n    defaultComponents[componentName] = {};\n\n    var primitiveMapping = {};\n    var componentSchema = {};\n\n    for (const [key, value] of Object.entries(properties)) {\n        var keyCamelCase = hyphenatedToCamel(key);\n        primitiveMapping[key] = componentName + '.' + keyCamelCase;\n        componentSchema[keyCamelCase] = {default: value};\n    }\n\n    AFRAME.registerPrimitive('lp-' + geometryName, extendDeep({}, meshMixin, {\n      // Preset default components. These components and component properties will be attached to the entity out-of-the-box.\n      defaultComponents: defaultComponents,\n      mappings: LowPoly.addMappings(componentName, primitiveMapping)\n    }));\n\n    AFRAME.registerComponent(componentName, {\n      schema: LowPoly.addSchema(componentSchema),\n\n      play: function() {\n        LowPoly.create(this, createGeometry);\n      },\n\n      update: function() {\n        LowPoly.create(this, createGeometry);\n      },\n\n      remove: function () {\n        this.el.removeObject3D('mesh');\n      },\n\n    });\n  }\n}\n\n/**\n * Terrain\n **/\n\nexport class LowPolyTerrain {\n\n  static registerCurvature(componentName, computePosition) {\n    AFRAME.registerComponent(componentName, {\n      init: function() {\n        this.curvature_initialized = false;\n      },\n\n      tick: function (time, delta) {\n        if (!this.curvature_initialized) {\n          // Place in tick, as tick occurs pre-render\n          this.curvature_initialized = true;\n          LowPolyTerrain.updateCurvature(this, computePosition);\n        }\n      },\n    });\n  }\n\n  static updateCurvature(that, computePosition) {\n    var geometry = that.el.getObject3D('mesh').geometry;\n    var min = LowPolyTerrain.computeMinPosition(geometry.vertices);\n    var max = LowPolyTerrain.computeMaxPosition(geometry.vertices);\n\n    for (let v, i = 0, l = geometry.vertices.length; i < l; i++) {\n      v = geometry.vertices[i];\n\n      var position = computePosition(v, min, max);\n      v.x = position.x;\n      v.y = position.y;\n      v.z = position.z;\n      v.ox = position.x;\n      v.oy = position.y;\n      v.oz = position.z;\n    }\n    geometry.verticesNeedUpdate = true;\n  }\n\n  static computeMinPosition(vertices) {\n    var min = {x: Infinity, y: Infinity, z: Infinity};\n    for (let v, i = 0, l = vertices.length; i < l; i++) {\n      v = vertices[i];\n      min.x = Math.min(v.x, min.x);\n      min.y = Math.min(v.y, min.y);\n      min.z = Math.min(v.z, min.z);\n    }\n    return min;\n  }\n\n  static computeMaxPosition(vertices) {\n    var max = {x: -Infinity, y: -Infinity, z: -Infinity};\n    for (let v, i = 0, l = vertices.length; i < l; i++) {\n      v = vertices[i];\n      max.x = Math.max(v.x, max.x);\n      max.y = Math.max(v.y, max.y);\n      max.z = Math.max(v.z, max.z);\n    }\n    return max;\n  }\n}\n\n/**\n * Cloning\n */\n\nAFRAME.registerComponent('clone', {\n\tschema: {\n\t\ttype: 'selector'\n\t},\n\n  // originally taken from https://github.com/SamsungInternet/a-frame-components/blob/master/dist/clone.js\n\tinit: function () {\n\t\tvar clone = this.data.object3D.clone(true);\n\t\tclone.visible = true;\n\t\tthis.el.setObject3D('clone', clone);\n\t}\n});\n\n/**\n * Utilities\n */\n\nfunction capitalizeFirstLetter(string) {\n   return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction lowercaseFirstLetter(string) {\n    return string.charAt(0).toLowerCase() + string.slice(1);\n}\n\nfunction hyphenatedToCamel(hyphenated) {\n  return lowercaseFirstLetter(hyphenated.split(\"-\")\n   .map(token => capitalizeFirstLetter(token))\n   .join(\"\"));\n}\n\nexport class Random {\n  // Seeded prng\n  // https://stackoverflow.com/a/47593316/4855984\n\n  static seed(seed) {\n    // Create a xfnv1a state:\n    var seed = Random.xfnv1a(seed.toString());\n\n    // output one 32-bit hash to produce the seed for mulberry32.\n    this.random = Random.mulberry32(seed());\n  }\n\n  static xfnv1a(k) {\n      for(var i = 0, h = 2166136261 >>> 0; i < k.length; i++)\n          h = Math.imul(h ^ k.charCodeAt(i), 16777619);\n      return function() {\n          h += h << 13; h ^= h >>> 7;\n          h += h << 3;  h ^= h >>> 17;\n          return (h += h << 5) >>> 0;\n      }\n  }\n\n  static mulberry32(a) {\n      return function() {\n        var t = a += 0x6D2B79F5;\n        t = Math.imul(t ^ t >>> 15, t | 1);\n        t ^= t + Math.imul(t ^ t >>> 7, t | 61);\n        return ((t ^ t >>> 14) >>> 0) / 4294967296;\n      }\n  }\n\n  static random() {\n    return this.random();\n  }\n}\n", "import { LowPolyFactory } from '../main'\n\nLowPolyFactory.simple('box', createBoxGeometry, {\n    'width': 1,\n    'height': 1,\n    'depth': 1,\n    'segments-width': 10,\n    'segments-height': 10,\n    'segments-depth': 10\n});\n\nfunction createBoxGeometry(data) {\n  return new THREE.BoxGeometry(\n    data.width, data.height, data.depth, data.segmentsWidth,\n    data.segmentsHeight, data.segmentsDepth);\n}\n", "import { LowPolyFactory } from '../main'\n\nLowPolyFactory.simple('circle', createCircleGeometry, {\n    'radius': 1,\n    'segments': 10,\n    'theta-start': 0,\n    'theta-length': 2*Math.PI   // TODO: insert a converter from radians to deg, where?\n})\n\nfunction createCircleGeometry(data) {\n  return new THREE.CircleGeometry(\n    data.radius, data.segments, data.thetaStart, data.thetaLength);\n}\n", "import { LowPolyFactory } from '../main'\n\nLowPolyFactory.simple('cone', createConeGeometry, {\n    'radius': 1,\n    'height': 1,\n    'segments-radial': 10,\n    'segments-height': 10,\n    'open-ended': false,\n    'theta-start': 0,\n    'theta-length': 2*Math.PI   // TODO: insert a converter from radians to deg, where?\n})\n\nfunction createConeGeometry(data) {\n  return new THREE.ConeGeometry(\n    data.radius, data.height, data.segmentsRadial, data.segmentsHeight,\n    data.openEnded, data.thetaStart, data.thetaLength);\n}\n", "import { LowPolyFactory } from '../main'\n\nLowPolyFactory.simple('cylinder', createCylinderGeometry, {\n    'radius-top': 1,\n    'radius-bottom': 1,\n    'height': 1,\n    'segments-radial': 10,\n    'segments-height': 10,\n    'open-ended': false,\n    'theta-start': 0,\n    'theta-length': 2*Math.PI   // TODO: insert a converter from radians to deg, where?\n})\n\nfunction createCylinderGeometry(data) {\n  return new THREE.CylinderGeometry(\n    data.radiusTop, data.radiusBottom, data.height, data.segmentsRadial,\n    data.segmentsHeight, data.openEnded, data.thetaStart, data.thetaLength);\n}\n", "import { LowPolyFactory } from '../main'\n\nLowPolyFactory.simple('plane', createPlaneGeometry, {\n    'width': 1,\n    'height': 1,\n    'segments-width': 10,\n    'segments-height': 10\n})\n\nfunction createPlaneGeometry(data) {\n  return new THREE.PlaneGeometry(\n    data.width, data.height, data.segmentsWidth, data.segmentsHeight);\n}\n", "import { LowPolyFactory } from '../main'\n\nLowPolyFactory.simple('sphere', createSphereGeometry, {\n    'radius': 1,\n    'segments-width': 10,\n    'segments-height': 10,\n    'phi-start': 0,\n    'phi-length': 2*Math.PI,\n    'theta-start': 0,\n    'theta-length': 2*Math.PI   // TODO: insert a converter from radians to deg, where?\n});\n\nfunction createSphereGeometry(data) {\n  return new THREE.SphereGeometry(\n    data.radius, data.segmentsWidth, data.segmentsHeight, data.phiStart,\n    data.phiLength, data.thetaStart, data.thetaLength);\n}\n", "require(\"aframe\")\n\nimport './primitives/box'\nimport './primitives/circle'\nimport './primitives/cone'\nimport './primitives/cylinder'\nimport './primitives/plane'\nimport './primitives/sphere'\n"],
  "mappings": "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",
  "names": []
}
